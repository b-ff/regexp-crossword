{"version":3,"sources":["serviceWorker.js","config.js","layout.js","components/Header/Header.jsx","components/Cell/Cell.jsx","common/MatchLine.js","components/Crossword/Crossword.jsx","components/Footer/Footer.jsx","index.js"],"names":["Boolean","window","location","hostname","match","config","appName","columnsCount","rowsCount","columnRegularExpressions","rowRegularExpressions","fontWeights","regular","medium","bold","colors","StyledHeader","styled","header","Header","StyledCell","div","isValid","StyledRowHeading","StyledColumnHeading","StyledInput","input","Cell","row","column","onChange","value","id","type","pattern","maxLength","event","target","console","log","style","position","pointerEvents","MatchLine","regexp","_items","_isValid","this","RegExp","index","item","checkValidity","isFull","length","filter","regexpPassed","test","join","values","StyledCrosswordContainer","main","StyledCrosswordField","figure","StyledButton","button","rows","Array","fill","map","line","items","columns","Crossword","getEmptyState","getValueIndex","useState","cellValues","setCellValues","cells","onCellChanged","setItem","newValues","validRowsCount","validColumnsCount","alert","push","key","onClick","forEach","StyledFooter","footer","Footer","href","rel","GlobalStyle","createGlobalStyle","Object","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c832f56.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const config = {\n  appName: 'RegExp crossword',\n  columnsCount: 5,\n  rowsCount: 5,\n  columnRegularExpressions: [\n    '(11|0)+',\n    '[01]+',\n    '(10101|01010)',\n    '0+1+0+',\n    '(0|1)(0|1)\\\\2\\\\1\\\\1'\n  ],\n  rowRegularExpressions: [\n    '(11|00)+1',\n    '1{2,}0{2,}',\n    '0?1?0?1?0?1?',\n    '0?1+0?',\n    '0+1+'\n  ]\n}","export const fontWeights = {\n  regular: '400',\n  medium: '600',\n  bold: '700'\n}\n\nexport const colors = {\n  black: 'rgb(0, 0, 0)',\n  secondary: 'rgba(0, 0, 0, 0.1)',\n  invalid: 'red',\n  valid: '#00d486'\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { config } from '../../config'\nimport { fontWeights } from '../../layout'\n\nconst StyledHeader = styled.header`\n  padding: 2rem;\n  text-align: center;\n  font-size: 2rem;\n  font-weight: ${fontWeights.medium};\n`\n\nexport const Header = () => (\n  <StyledHeader>\n    Welcome to {config.appName}!\n  </StyledHeader>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { config } from '../../config'\nimport { colors } from '../../layout'\n\nconst StyledCell = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  white-space: nowrap;\n  box-sizing: border-box;\n  outline: 1px solid #000;\n  background-color: ${({ isValid }) => isValid ? colors.valid : 'white'};\n  \n  &:after {\n    display: block;\n    content: \" \";\n    margin-top: 100%;\n  }\n`\nconst StyledRowHeading = styled(StyledCell)`\n  justify-content: flex-start;\n  outline: none;\n`\n\nconst StyledColumnHeading = styled(StyledRowHeading)`\n  writing-mode: vertical-lr;\n  text-orientation: mixed;\n`\n\nconst StyledInput = styled.input`\n  display: block;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  font-size: 2rem;\n  border: none;\n  outline: none;\n  background: transparent;\n\n  &:invalid {\n    color: ${colors.invalid}\n  }\n`\n\nexport function Cell ({row, column, onChange, isValid, value}) {\n  const id = `cell-r${row}-c${column}`\n\n  if (!row) {\n    return <StyledColumnHeading\n      id={id}\n      isValid={isValid}\n    >\n      {config.columnRegularExpressions[column - 1]}\n    </StyledColumnHeading>\n  }\n\n  if (row && !column) {\n    return <StyledRowHeading\n      id={id}\n      isValid={isValid}\n    >\n      {config.rowRegularExpressions[row - 1]}\n    </StyledRowHeading>\n  }\n\n  if (row && column) {\n    return <StyledCell\n      id={id}\n      isValid={isValid}\n    >\n      <StyledInput\n        type=\"text\"\n        pattern=\"(1|0)\"\n        maxLength=\"1\"\n        value={value}\n        onChange={event => onChange(row, column, event.target.value) || console.log(133, isValid)}\n      />\n      <div style={{position: 'absolute', pointerEvents: 'none'}}>{isValid}</div>\n    </StyledCell>\n  }\n}\n","export class MatchLine {\n  regexp = /.*/\n  _items = []\n  _isValid = false\n\n  constructor(\n    regexp\n  ) {\n    this.regexp = new RegExp(regexp)\n  }\n\n  get items() {\n    return [...this._items]\n  }\n\n  get isValid() {\n    return this._isValid\n  }\n\n  set items(values = []) {\n    this._items = values\n    this.checkValidity()\n  }\n  \n  setItem(index, item) {\n    this._items[index] = item\n    this.checkValidity()\n  }\n\n  checkValidity() {\n    const isFull = this._items.length === this._items.filter(item => item !== null).length\n    const regexpPassed = this.regexp.test(this._items.join(''))\n    return this._isValid = isFull && regexpPassed\n  }\n}","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { config } from '../../config'\nimport { Cell } from '../Cell'\nimport { MatchLine } from '../../common/MatchLine'\n\nconst StyledCrosswordContainer = styled.main`\n  flex: 1 100%;\n  text-align: center;\n  padding: 1rem;\n`\n\nconst StyledCrosswordField = styled.figure`\n  display: grid;\n  grid-template-rows: repeat(${config.rowsCount + 1}, 1fr);\n  grid-template-columns: repeat(${config.columnsCount + 1}, 1fr);\n  width: 36%;\n  margin: 0 32%;\n  text-align: center;\n\n  @media screen and (max-width: 1024px) {\n    width: 60%;\n    margin: 0 20%;\n  }\n\n\n  @media screen and (max-width: 960px) {\n    width: 90%;\n    margin: 0 5%;\n  }\n`\n\nconst StyledButton = styled.button`\n  margin: 1rem auto;\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n  border: none;\n  outline: none;\n  border-radius: 0.25rem;\n  cursor: pointer;\n`\n\nconst rows = (new Array(config.rowsCount))\n  .fill()\n  .map((item, index) => {\n    const line = new MatchLine(config.rowRegularExpressions[index])\n    line.items = (new Array(config.columnsCount)).fill(null)\n    return line\n  })\n\nconst columns = (new Array(config.columnsCount))\n  .fill()\n  .map((item, index) => {\n    const line = new MatchLine(config.columnRegularExpressions[index])\n    line.items = (new Array(config.rowsCount)).fill(null)\n    return line\n  })\n\nexport function Crossword () {\n  const getEmptyState = () => (new Array(config.rowsCount * config.columnsCount)).fill('')\n  const getValueIndex = (row, column) => ((row - 1) * config.columnsCount) + (column - 1)\n  const [cellValues, setCellValues] = useState(getEmptyState())\n\n  const cells = []\n\n  const onCellChanged = (row, column, value) => {\n    rows[row - 1].setItem(column - 1, value)\n    columns[column - 1].setItem(row - 1, value)\n\n    const newValues = [...cellValues]\n    newValues[getValueIndex(row, column)] = value\n\n    setCellValues(newValues)\n  \n    console.log(`value changed at row ${row}, column ${column}:`, newValues)\n\n    const validRowsCount = rows.filter(row => row.isValid).length\n    const validColumnsCount = columns.filter(column => column.isValid).length\n\n    if (config.rowsCount === validRowsCount && config.columnsCount === validColumnsCount) {\n      alert('You win!')\n    }\n  }\n\n  const clear = () => {\n    rows.forEach(row => row.items = (new Array(config.columnsCount)).fill(null))\n    columns.forEach(column => column.items = (new Array(config.rowsCount)).fill(null))\n    setCellValues(getEmptyState())\n  }\n  \n  for (let row = 0; row <= config.rowsCount; row++) {\n    for (let column = 0; column <= config.columnsCount; column++) {\n      const value = cellValues[getValueIndex(row, column)]\n  \n      cells.push(\n        <Cell\n          key={`cell-${row}:${column}`}\n          row={row}\n          column={column}\n          isValid={(row && rows[row - 1].isValid) || (column && columns[column - 1].isValid)}\n          onChange={onCellChanged}\n          value={value}\n        />\n      )\n    }\n  }\n\n  return (\n    <StyledCrosswordContainer>\n      <StyledCrosswordField>\n        {cells}\n      </StyledCrosswordField>\n      <StyledButton type=\"button\" onClick={clear}>\n        Clear\n      </StyledButton>\n    </StyledCrosswordContainer>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { colors } from '../../layout'\n\nconst StyledFooter = styled.footer`\n  padding: 2rem;\n  font-size: .75rem;\n  text-align: center;\n  color: ${colors.secondary};\n\n  a {\n    color: ${colors.secondary};\n  }\n`\n\nexport const Footer = () => (\n  <StyledFooter>\n    Made by <a href=\"http://b-ff.ru\" target=\"_blank\" rel=\"noopener noreferrer\">Slava Biryukov</a> with love for RegExp and Code Challenges lovers\n  </StyledFooter>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { Header } from './components/Header'\nimport { Crossword } from './components/Crossword'\nimport { Footer } from './components/Footer'\n\nimport { fontWeights } from './layout'\n\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@${Object.values(fontWeights).join(';')}&display=swap');\n\n  html, body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n    font-size: 16px;\n  }\n\n  #root {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    align-content: stretch;\n    width: 100%;\n    height: 100%;\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <Crossword /> \n    <Footer />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}